#!/bin/zsh
# shellcheck shell=bash

# merge v0.1.8

export PATH=/usr/bin:/bin:/usr/sbin:/sbin
export SYSTEM_VERSION_COMPAT=0
export LANG=en_US.UTF-8

accountname=$(scutil <<< "show State:/Users/ConsoleUser" | awk '/Name :/ && ! /loginwindow/ { print $3 }')
HOMEDIR=$(eval echo "~$accountname")

logloc="/tmp/local.lcars.merge.log"
currentdate=$(date)
if ! [[ -f $logloc ]] ; then
	echo "++++++++ $currentdate ++++++++" > "$logloc"
else
	echo -e "\n++++++++ $currentdate ++++++++" >> "$logloc"
fi
exec > >(tee "$logloc") 2>&1

configdir="$HOMEDIR/.config/local.lcars.merge"
deleteloc="$configdir/deletions"
if ! [[ -d "$configdir" ]] ; then
	mkdir -p "$configdir" 2>/dev/null
	touch "$deleteloc"
else
	if ! [[ -f "$deleteloc" ]] ; then
		touch "$deleteloc"
	fi
fi
deletions=$(grep -v "^$" < "$deleteloc")
if [[ $deletions ]] ; then
	rmfiles=true
	suffixes=$(echo "$deletions" | grep "^\*\." 2>/dev/null)
	if [[ $suffixes ]] ; then
		checkext=true
	else
		checkext=false
	fi
else
	rmfiles=false
	checkext=false
fi

read -d '' sysparents <<"EOF"
/etc
/Library
/opt
/opt/local
/opt/local/etc
/opt/local/include
/opt/local/lib
/opt/local/libexec
/opt/local/share
/opt/local/var
/private
/private/etc
/private/tftpboot
/private/var
/sbin
/System
/System/Library
/Users
/usr
/usr/bin
/usr/lib
/usr/libexec
/usr/local
/usr/local/Cellar
/usr/local/etc
/usr/local/include
/usr/local/lib
/usr/local/libexec
/usr/local/opt
/usr/local/share
/usr/local/share/man
/usr/local/var
/usr/share
/usr/share/man
/usr/standalone
/var
/Volumes
EOF
# plus: /

read -d '' userparents <<EOF
$HOMEDIR/.local
$HOMEDIR/.local/etc
$HOMEDIR/.local/include
$HOMEDIR/.local/lib
$HOMEDIR/.local/share
$HOMEDIR/.local/share/man
$HOMEDIR/.local/var
$HOMEDIR/Library
EOF
# plus: $HOMEDIR

read -d '' userblocked_root <<EOF
$HOMEDIR/.bash_history
$HOMEDIR/.bash_profile
$HOMEDIR/.bash_sessions
$HOMEDIR/.cache
$HOMEDIR/.cargo
$HOMEDIR/.config
$HOMEDIR/.cups
$HOMEDIR/.docker
$HOMEDIR/.dropbox
$HOMEDIR/.gem
$HOMEDIR/.gitconfig
$HOMEDIR/.gnupg
$HOMEDIR/.gnupg_pre_2.1
$HOMEDIR/.ipfs
$HOMEIDR/.iterm2
$HOMEDIR/.iterm2_shell_integration.bash
$HOMEDIR/.iterm2_shell_integration.zsh
$HOMEDIR/.local
$HOMEDIR/.oracle_jre_usage
$HOMEDIR/.profile
$HOMEDIR/.python_history
$HOMEDIR/.sh_history
$HOMEDIR/.sqlite_history
$HOMEDIR/ssh
$HOMEDIR/.Trash
$HOMEDIR/.vim
$HOMEDIR/.viminfo
$HOMEDIR/.zcompdump
$HOMEDIR/.zhistory
$HOMEDIR/.zlogin
$HOMEDIR/.zlogout
$HOMEDIR/.zprezto
$HOMEDIR/.zpreztorc
$HOMEDIR/.zprofile
$HOMEDIR/.zsh_history
$HOMEDIR/.zshenv
$HOMEDIR/.zshrc
$HOMEDIR/Applications
$HOMEDIR/bin
$HOMEDIR/Desktop
$HOMEDIR/Developer
$HOMEDIR/Documents
$HOMEDIR/Downloads
$HOMEDIR/Library
$HOMEDIR/Movies
$HOMEDIR/Music
$HOMEDIR/Pictures
$HOMEDIR/Public
$HOMEDIR/Sites
EOF

read -d '' userblocked_other <<EOF
$HOMEDIR/Developer/Applications
$HOMEDIR/Library/Developer
$HOMEDIR/Movies/iMovie Library.imovielibrary
$HOMEDIR/Movies/iMovie Theater.theater
$HOMEDIR/Movies/TV
$HOMEDIR/Movies/TV/TV Library.tvlibrary
$HOMEDIR/Music/iTunes
$HOMEDIR/Music/Music
$HOMEDIR/Music/Music/Music Library.musiclibrary
$HOMEDIR/Photos/Photo Booth Library
$HOMEDIR/Photos/Photos Library.photoslibrary
$HOMEDIR/Public/Drop Box
EOF

if [[ $1 == "-d" ]] || [[ $1 == "--down" ]] ; then
	mergedown=true
	shift
else
	mergedown=false
	echo "Note: merge with tree retention not yet supported!" >&2 ###
	exit 1 ###
fi

if ! [[ $* ]] ; then
	echo "Error: no input" >&2
	exit 1
fi

if [[ $# -eq 1 ]] ; then
	filepath="$*"
	if ! [[ -e $* ]] ; then
		echo "Error: file missing: $filepath" >&2
		exit 1
	fi
	if ! [[ -d "$filepath" ]] ; then
		echo "Error: no merge of single non-directory files!" >&2
		exit 1
	else
		if ! $mergedown ; then
			### recursive search for file deletion (see below)
			echo "Error: single directory file! Nothing to merge!" >&2
			exit 1
		else
			parentdir=$(dirname "$filepath")
			if [[ $parentdir == "$HOMEDIR" ]] ; then
				if echo "$userblocked_root" | grep -q "^$filepath$" &>/dev/null ; then
					echo "Error - protected home file: $filepath" >&2
					exit 1
				fi
			elif [[ $parentdir == "/" ]] ; then
				echo "Error - protected root file: $filepath" >&2
				exit 1
			else
				if echo "$userparents" | grep -q "^$parentdir$" &>/dev/null ; then
					echo "Error - protected user file: $filepath" >&2
					exit 1
				else
					if echo "$sysparents" | grep -q "$parentdir$" &>/dev/null ; then
						echo "Error - protected system file: $filepath" >&2
						exit 1
					fi
				fi
				if echo "$userblocked_other" | grep -q "^$filepath$" &>/dev/null ; then
					echo "Error - protected user file: $filepath" >&2
					exit 1
				fi
			fi
			if ! [[ -w "$filepath" ]] ; then
				echo "Error - directory not writable: $filepath" >&2
				exit 1
			fi
			allregular=false
			single=true
			targetdir="$filepath"
			dirlist=$(find "$targetdir" -mindepth 1 -maxdepth 1 -type d 2>/dev/null)
			if ! [[ $dirlist ]] ; then
				if $rmfiles ; then
					quicklist=$(find "$targetdir" -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
					if [[ $quicklist ]] ; then
						fdeleted=false
						while read -r quicklistfile
						do
							sourcebase=$(basename "$quicklistfile")
							if [[ $sourcebase == ".DS_Store" ]] ; then
								if rm -f "$quicklistfile" &>/dev/null ; then
									echo "Removed: $quicklistfile"
									fdeleted=true
									continue
								else
									echo "rm error: $quicklistfile"
								fi
							fi
							if echo "$deletions" | grep -q "^$sourcebase$" &>/dev/null ; then
								if rm -f "$quicklistfile" &>/dev/null ; then
									echo "Removed: $quicklistfile"
									fdeleted=true
									continue
								else
									echo "rm error: $quicklistfile"
								fi
							fi
							if $checkext ; then
								suffix="${sourcebase##*.}"
								extension=$(echo "$suffix" | tr '[:upper:]' '[:lower:]')
								if [[ $extension ]] ; then
									if echo "$suffixes" | grep -q "^\*\.$extension$" &>/dev/null ; then
										if rm -f "$quicklistfile" &>/dev/null ; then
											echo "Removed (*.$extension): $quicklistfile"
											fdeleted=true
											continue
										else
											echo "rm error (*.$extension): $quicklistfile"
										fi
									fi
								fi
							fi
						done < <(echo "$quicklist")
						if ! $fdeleted ; then
							echo "Error: no subdirectories! Nothing to merge down!" >&2
							exit 1
						else
							exit 0
						fi
					else
						echo "Error: no subdirectories! Nothing to merge down!" >&2
						exit 1
					fi
				else
					echo "Error: no subdirectories! Nothing to merge down!" >&2
					exit 1
				fi	
			fi
		fi
	fi
else
	single=false
	dircount=0
	parentlist=""
	for filepath in "$@"
	do
		parentdir=$(dirname "$filepath")
		filename=$(basename "$filepath")
		if [[ $parentdir == "$HOMEDIR" ]] ; then
			if echo "$userblocked_root" | grep -q "^$filepath$" &>/dev/null ; then
				echo "Error - protected home file: $filepath" >&2
				exit 1
			fi
		elif [[ $parentdir == "/" ]] ; then
			echo "Error - protected root file: $filepath" >&2
			exit 1
		else
			if echo "$userparents" | grep -q "^$parentdir$" &>/dev/null ; then
				echo "Error - protected user file: $filepath" >&2
				exit 1
			else
				if echo "$sysparents" | grep -q "$parentdir$" &>/dev/null ; then
					echo "Error - protected system file: $filepath" >&2
					exit 1
				fi
			fi
			if echo "$userblocked_other" | grep -q "^$filepath$" &>/dev/null ; then
				echo "Error - protected user file: $filepath" >&2
				exit 1
			fi
		fi
		if ! [[ -w "$filepath" ]] ; then
			echo "Error: at least one file not writable: $filepath" >&2
			exit 1
		fi
		if [[ -d "$filepath" ]] ; then
			((dircount++))
			targetdir="$filepath"
			echo "Source directory: $filepath"
		else
			echo "Source file: $filepath"
		fi
		masterparent=$(dirname "$filepath")
		if [[ $parentlist ]] ; then
			parentlist="$parentlist\n$masterparent"
		else
			parentlist="$masterparent"
		fi
	done
	parentlist=$(echo -e "$parentlist" | sort | awk '!a[$0]++')
	if [[ $(echo "$parentlist" | wc -l) -gt 1 ]] ; then
		targethome=true
	else
		targethome=false
	fi
	if [[ $dircount -eq 0 ]] ; then
		allregular=true
		if $targethome ; then
			targetdir="$HOMEDIR/merged folder"
		else
			parent=$(dirname "$filepath")
			if ! [[ -w "$parent" ]] ; then
				targetdir="$HOMEDIR/merged folder"
			else
				targetdir="$parent/merged folder"
			fi
		fi
	else
		allregular=false
		if [[ $dircount -gt 1 ]] ; then
			if $targethome ; then
				targetdir="$HOMEDIR/merged folder"
			else
				parent=$(dirname "$filepath")
				if ! [[ -w "$parent" ]] ; then
					targetdir="$HOMEDIR/merged folder"
				else
					targetdir="$parent/merged folder"
				fi
			fi
		fi
	fi
fi

exit ###

currentposix=$(date +%s)
if [[ $(basename "$targetdir") == "merged folder" ]] && [[ -d "$targetdir" ]] ; then
	targetdir="$targetdir $currentposix"
fi

echo "Target directory: $targetdir"

if $mergedown ; then
	if $single ; then
		allfiles=$(find "$filepath" -mindepth 1 -type f 2>/dev/null | sort)
		while read -r sourcefile
		do
			if ! [[ -w "$sourcefile" ]] ; then
				echo "Error: at least one file is not writable: $sourcefile" >&2
				exit 1
			fi
		done < <(echo "$allfiles")
	else
		allfiles=""
		for filepath in "$@"
		do
			if [[ -d "$filepath" ]] ; then
				partialfiles=$(find "$filepath" -mindepth 1 -type f 2>/dev/null)
			else
				partialfiles="$filepath"
			fi
			if [[ $allfiles ]] ; then
				allfiles="$allfiles\n$partialfiles"
			else
				allfiles="$partialfiles"
			fi
		done
		allfiles=$(echo -e "$allfiles" | sort)
		while read -r sourcefile
		do
			if ! [[ -w "$sourcefile" ]] ; then
				echo "Error: at least one file is not writable: $sourcefile" >&2
				exit 1
			fi
		done < <(echo "$allfiles")
	fi
	if ! [[ -d "$targetdir" ]] ; then
		if ! mkdir "$targetdir" &>/dev/null ; then
			echo "Error creating target directory!" >&2
			exit 1
		fi
	fi
	mverror=false
	while read -r sourcefile
	do
		sourcebase=$(basename "$sourcefile")
		if [[ $sourcebase == ".DS_Store" ]] ; then
			if rm -f "$sourcefile" &>/dev/null ; then
				echo "Removed: $sourcefile"
			else
				echo "rm error: $sourcefile" >&2
			fi
			continue
		fi
		sourceparent=$(dirname "$sourcefile")
		if $rmfiles ; then
			if echo "$deletions" | grep -q "^$sourcebase$" &>/dev/null ; then
				if rm -f "$sourcefile" &>/dev/null ; then
					echo "Removed: $sourcefile"
				else
					echo "rm error: $sourcefile" >&2
				fi
				continue
			fi
			if $checkext ; then
				suffix="${sourcebase##*.}"
				extension=$(echo "$suffix" | tr '[:upper:]' '[:lower:]')
				if [[ $extension ]] ; then
					if echo "$suffixes" | grep -q "^\*\.$extension$" &>/dev/null ; then
						if rm -f "$sourcefile" &>/dev/null ; then
							echo "Removed (*.$extension): $sourcefile"
						else
							echo "rm error (*.$extension): $sourcefile" >&2
						fi
						continue
					fi
				fi
			fi
		fi	
		if [[ $sourceparent != "$targetdir" ]] ; then
			if ! [[ -e "$targetdir/$sourcebase" ]] ; then
				if ! mv -f "$sourcefile" "$targetdir/$sourcebase" &>/dev/null ; then
					volsource=$(df "$sourcefile" | tail -1 | awk '{print $NF}')
					voltarget=$(df "$targetdir" | tail -1 | awk '{print $NF}')
					if [[ $volsource == "$voltarget" ]] ; then
						echo "mv error: $sourcefile" >&2
						mverror=true
					else
						echo "mv error & different volume - trying to copy instead: $sourcefile"
						if ! cp -f "$sourcefile" "$targetdir/$sourcebase" &>/dev/null ; then
							echo "cp error: $sourcefile" >&2
							mverror=true
						else
							echo "File merged (cp): $sourcefile"
						fi
					fi
				else
					echo "File merged (mv): $sourcefile"
				fi
			else
				sourcehash=$(crc32 "$sourcefile")
				targethash=$(crc32 "$targetdir/$sourcebase")
				if [[ $sourcehash != "$targethash" ]] ; then
					sourcedate=$(date -r "$sourcefile" +%s)
					targetdate=$(date -r "$targetdir/$sourcebase" +%s)
					if [[ $sourcedate -le $targetdate ]] ; then
						mkdir "$targetdir/$sourcebase $sourcehash" 2>/dev/null
						if ! mv -f "$sourcefile" "$targetdir/$sourcebase $sourcehash/$sourcebase" &>/dev/null ; then
							volsource=$(df "$sourcefile" | tail -1 | awk '{print $NF}')
							voltarget=$(df "$targetdir" | tail -1 | awk '{print $NF}')
							if [[ $volsource == "$voltarget" ]] ; then
								echo "mv error: $sourcefile" >&2
								mverror=true
							else
								echo "mv error & different volume - trying to copy instead: $sourcefile"
								if ! cp -f "$sourcefile" "$targetdir/$sourcebase $sourcehash/$sourcebase" &>/dev/null ; then
									echo "cp error: $sourcefile" >&2
									mverror=true
								else
									echo "File with duplicate basename merged (cp): $sourcefile"
								fi
							fi
						else
							echo "File with duplicate basename merged (mv): $sourcefile"
						fi
					elif [[ $sourcedate -gt $targetdate ]] ; then
						mkdir "$targetdir/$sourcebase $targethash" 2>/dev/null
						if ! mv -f "$targetdir/$sourcebase" "$targetdir/$sourcebase $targethash/$sourcebase" &>/dev/null ; then
							echo "mv to subfolder error: $targethash/$sourcebase"
							mv "$targetdir/$sourcebase $targethash" "$targetdir/$sourcebase $sourcehash" 2>/dev/null
							if ! mv -f "$sourcefile" "$targetdir/$sourcebase $sourcehash/$sourcebase" &>/dev/null ; then
								volsource=$(df "$sourcefile" | tail -1 | awk '{print $NF}')
								voltarget=$(df "$targetdir" | tail -1 | awk '{print $NF}')
								if [[ $volsource == "$voltarget" ]] ; then
									echo "mv error: $sourcefile" >&2
									mverror=true
								else
									echo "mv error & different volume - trying to copy instead: $sourcefile"
									if ! cp -f "$sourcefile" "$targetdir/$sourcebase $sourcehash/$sourcebase" &>/dev/null ; then
										echo "cp error: $sourcefile" >&2
										mverror=true
									else
										echo "File with duplicate basename merged (cp): $sourcefile"
									fi
								fi
							else
								echo "File with duplicate basename merged (mv): $sourcefile"
							fi
						else
							echo "Older file moved to subfolder: $targethash/$sourcebase"
							if ! mv -f "$sourcefile" "$targetdir/$sourcebase" &>/dev/null ; then
								volsource=$(df "$sourcefile" | tail -1 | awk '{print $NF}')
								voltarget=$(df "$targetdir" | tail -1 | awk '{print $NF}')
								if [[ $volsource == "$voltarget" ]] ; then
									echo "mv error: $sourcefile" >&2
									mverror=true
								else
									echo "mv error & different volume - trying to copy instead: $sourcefile"
									if ! cp -f "$sourcefile" "$targetdir/$sourcebase" &>/dev/null ; then
										echo "cp error: $sourcefile" >&2
										mverror=true
									else
										echo "File with duplicate basename merged (cp): $sourcefile"
									fi
								fi
							else
								echo "File with duplicate basename merged (mv): $sourcefile"
							fi
						fi
					fi
				else
					if ! rm -f "$sourcefile" &>/dev/null ; then
						echo "rm error: could not delete duplicate: $sourcefile"
						mverror=true
					else
						echo "Removed duplicate: $sourcefile"
					fi
				fi
			fi				
		fi
	done < <(echo "$allfiles")
	voltrash=$(df "$HOMEDIR/.Trash" | tail -1 | awk '{print $NF}')
	if ! $single ; then
		if ! $mverror ; then
			for filepath in "$@"
			do
				if [[ $filepath != "$targetdir" ]] && [[ -e "$filepath" ]] ; then
					volsource=$(df "$filepath" | tail -1 | awk '{print $NF}')
					if [[ $volsource == "$voltrash" ]] ; then
						sourcebase=$(basename "$filepath")
						trashloc="$HOMEDIR/.Trash/$sourcebase"
						if [[ -e "$trashloc" ]] ; then
							mkdir "$HOMEDIR/.Trash/$currentposix" 2>/dev/null
							trashloc="$HOMEDIR/.Trash/$currentposix/$sourcebase"
						fi
						if [[ -e "$filepath" ]] ; then
							if ! mv -f "$filepath" "$trashloc" &>/dev/null ; then
								echo "Error moving source to trash: $filepath" >&2
							else
								echo "Moved to trash: $filepath"
							fi
						fi
					else
						echo "Different volume - not moving to trash: $filepath" >&2
					fi
				fi
			done
		else
			echo "Errors encountered: will not move sources to trash!" >&2
		fi
	else
		if $mverror ; then
			echo "Errors encountered!" >&2
		fi
	fi
	dirlist=$(find "$targetdir" -mindepth 1 -maxdepth 1 -type d 2>/dev/null)
	if [[ $dirlist ]] ; then
		echo "Trying to clean up..."
		while read -r finaldir
		do
			finalfiles=$(find "$finaldir" -mindepth 1 -type f -print -quit 2>/dev/null)
			if ! [[ $finalfiles ]] ; then
				volfinal=$(df "$finaldir" 2>/dev/null | tail -1 2>/dev/null | awk '{print $NF}' 2>/dev/null)
				if [[ $volfinal ]] ; then
					if [[ $volfinal == "$voltrash" ]] ; then
						! [[ -d "$HOMEDIR/.Trash/folders $currentposix" ]] && mkdir "$HOMEDIR/.Trash/folders $currentposix" 2>/dev/null
						finaldirbase=$(basename "$finaldir")
						if mv -f "$finaldir" "$HOMEDIR/.Trash/folders $currentposix/$finaldirbase" &>/dev/null ; then
							echo "Moved to trash: $finaldir"
						else
							echo "Error moving to trash: $finaldir" >&2
						fi
					else
						echo "Different volume - not moving to trash: $finaldir" >&2
					fi
				else
					! [[ -d "$HOMEDIR/.Trash/folders $currentposix" ]] && mkdir "$HOMEDIR/.Trash/folders $currentposix" 2>/dev/null
					finaldirbase=$(basename "$finaldir")
					if mv -f "$finaldir" "$HOMEDIR/.Trash/folders $currentposix/$finaldirbase" &>/dev/null ; then
						echo "Moved to trash: $finaldir"
					else
						echo "Error moving to trash: $finaldir" >&2
					fi
				fi
			fi
		done < <(echo "$dirlist")
	fi
else
	echo "tree retention" ###
fi

echo "Done"
exit 0
